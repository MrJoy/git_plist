#!/usr/bin/env ruby

require "git_plist"

# See `git_plist_clean.rb` for instructions.

def dump_data(data, original_format, file_out, file_in)
  file_out.write(data)
  file_out.flush
  out_name  = Shellwords.shellescape(file_out.path)
  in_name   = Shellwords.shellescape(file_in.path)
  response  = `plutil -convert #{original_format} #{out_name} -s -o #{in_name}`.strip

  raise "Got unexpected error:\n#{response}" unless response == ""

  printf "%s", file_in.read.force_encoding("ASCII-8BIT")
end

raw = STDIN.read
# If we get a zero-length input, or non-JSON input, don't try to be clever, just pass it through and
# hope for the best.
if raw.length == 0 || raw[0] != "{"
  printf "%s", raw
  exit
end

result = JSON.parse(raw)
raise "Parse error, expected a JSON object, got: #{result.class}" unless result.is_a?(Hash)

file_out  = Tempfile.new("plist_smudge_out")
file_in   = Tempfile.new("plist_smudge_in")
begin
  case result["new_format"]
  when "xml1"
    dump_data(result["data"].join("\n"), result["original_format"], file_out, file_in)
  when "json"
    dump_data(JSON.generate(result["data"]), result["original_format"], file_out, file_in)
  when "unknown"
    printf "%s", result["data"].map(&:chr).join("").force_encoding("ASCII-8BIT")
  else
    raise "Expected new_format to be one of xml1, json, or unknown.  Got: #{result["new_format"].inspect}"
  end
ensure
  file_out.close
  file_in.close
  file_out.unlink
  file_in.unlink
end
